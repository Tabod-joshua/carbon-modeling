# Generated by Django 5.2.3 on 2025-07-05 22:48

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CarbonCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('farm_size', models.FloatField(help_text='Farm size in hectares', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('commune', models.CharField(help_text='Commune location in Cameroon', max_length=100)),
                ('farming_practice', models.CharField(choices=[('conventional', 'Conventional'), ('organic', 'Organic'), ('agroforestry', 'Agroforestry'), ('conservation', 'Conservation'), ('mixed', 'Mixed')], default='conventional', max_length=50)),
                ('crop_classes', models.JSONField(default=list, help_text='List of crop classes grown on the farm')),
                ('fertilizer_type', models.CharField(choices=[('none', 'None'), ('organic', 'Organic'), ('synthetic', 'Synthetic'), ('both', 'Both')], default='none', max_length=20)),
                ('fertilizer_rate', models.FloatField(default=0.0, help_text='Fertilizer application rate in kg/ha', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('tillage_practice', models.CharField(choices=[('conventional_till', 'Conventional Tillage'), ('reduced_till', 'Reduced Tillage'), ('no_till', 'No-Till')], default='conventional_till', max_length=30)),
                ('irrigation', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='no', max_length=3)),
                ('uses_machinery', models.BooleanField(default=False)),
                ('fuel_consumption', models.FloatField(default=0.0, help_text='Monthly fuel consumption in liters', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('keeps_livestock', models.BooleanField(default=False)),
                ('livestock_counts', models.JSONField(default=dict, help_text='Livestock counts by animal type')),
                ('user_email', models.EmailField(max_length=254)),
                ('coordinates', models.JSONField(default=dict, help_text='Latitude and longitude coordinates')),
                ('weather_data', models.JSONField(default=dict, help_text='Weather data from external API')),
                ('soil_data', models.JSONField(default=dict, help_text='Soil data from external API')),
                ('climate_zone', models.CharField(blank=True, max_length=50)),
                ('total_emissions', models.FloatField(help_text='Total gross emissions in kg CO2e per year')),
                ('net_emissions', models.FloatField(help_text='Net emissions (after soil carbon sequestration) in kg CO2e per year')),
                ('emissions_per_hectare', models.FloatField(help_text='Emissions per hectare in kg CO2e/ha/year')),
                ('fertilizer_emissions', models.FloatField(default=0.0)),
                ('livestock_emissions', models.FloatField(default=0.0)),
                ('fuel_emissions', models.FloatField(default=0.0)),
                ('soil_carbon_sequestration', models.FloatField(default=0.0)),
                ('carbon_intensity', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('recommendations_generated', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Carbon Calculation',
                'verbose_name_plural': 'Carbon Calculations',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['created_at'], name='carbon_calc_created_548db6_idx'), models.Index(fields=['commune'], name='carbon_calc_commune_f884be_idx'), models.Index(fields=['user_email'], name='carbon_calc_user_em_cc377a_idx'), models.Index(fields=['carbon_intensity'], name='carbon_calc_carbon__69c67d_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailDeliveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('email_type', models.CharField(choices=[('report', 'PDF Report'), ('notification', 'Notification'), ('reminder', 'Reminder')], default='report', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('delivered', 'Delivered')], default='pending', max_length=20)),
                ('attempt_count', models.PositiveIntegerField(default=1)),
                ('last_attempt_at', models.DateTimeField(auto_now=True)),
                ('error_message', models.TextField(blank=True)),
                ('email_provider_response', models.TextField(blank=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calculation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_logs', to='carbon_calculator.carboncalculation')),
            ],
            options={
                'verbose_name': 'Email Delivery Log',
                'verbose_name_plural': 'Email Delivery Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('executive_summary', models.TextField(help_text='3-sentence executive summary')),
                ('detailed_recommendations', models.TextField(help_text='Full AI-generated recommendations')),
                ('model_used', models.CharField(default='mistral', max_length=50)),
                ('generation_time_seconds', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('recommendations_quality_score', models.FloatField(blank=True, help_text='Quality score from 0-1 based on content analysis', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calculation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_log', to='carbon_calculator.carboncalculation')),
            ],
            options={
                'verbose_name': 'Recommendation Log',
                'verbose_name_plural': 'Recommendation Logs',
            },
        ),
    ]
